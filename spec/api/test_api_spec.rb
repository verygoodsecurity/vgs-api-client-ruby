=begin
#Vault HTTP API

#Storing, retrieving, and managing sensitive data within a VGS organization.  **NOTE:** _The Vault API is intended only for environments that are already PCI-compliant. If you want to use this API, but are not yet PCI-compliant, you can use [VGS Collect](https://www.verygoodsecurity.com/docs/vgs-collect/what-is-it) or VGS Proxy with [Inbound Routes](https://www.verygoodsecurity.com/docs/getting-started/quick-integration#securing-inbound-connection) to quickly and seamlessly achieve compliance._  Looking for the old version of the API? Find it [here](https://www.verygoodsecurity.com/docs/api/1/vault).  # Introduction  Each encrypted value stored in a VGS vault has one or multiple _aliases_ associated with it. These aliases are fully opaque and retain no information about the underlying data. The user may safely store aliases without compromising data security.  **NOTE:** The API works with persistent storage only. Unlike volatile storage, this means that the data is stored permanently, without any implicit TTL.  Aliases are not valuable on their own. However, they can be used to decrypt the associated value and pass it to another service via the [forward proxy](https://www.verygoodsecurity.com/docs/guides/outbound-connection).  ## Alias Formats  Each alias corresponds to a certain format. There are several alias formats suitable for different kinds of sensitive data.  For example, `UUID` produces a random Base58-encoded UUID string with an environment-dependent prefix:  ``` tok_sandbox_bhtsCwFUzoJMw9rWUfEV5e ```  This format is generic and suitable for any kind of data.  The tables below contain descriptions of all alias formats recognized by the API.  ### Generic Formats  | Value                   | Description                                           | |-------------------------|-------------------------------------------------------| | `NUM_LENGTH_PRESERVING` | Length-Preserving, Numeric                            | | `RAW_UUID`              | UUID                                                  | | `UUID`                  | UUID (Prefixed, Base58-Encoded)                       | | `GENERIC_T_FOUR`        | UUID (Prefixed, Base58-Encoded, Last four preserving) |  ### Account Number Formats  | Value                             | Description                          | |-----------------------------------|--------------------------------------| | `FPE_ACC_NUM_T_FOUR`              | Length-Preserving, Numeric (A4)      | | `FPE_ALPHANUMERIC_ACC_NUM_T_FOUR` | Length-Preserving, Alphanumeric (A4) |   ### Payment Card Formats  | Value            | Description                                 | |------------------|---------------------------------------------| | `FPE_SIX_T_FOUR` | Format-Preserving, Luhn Valid (6T4)         | | `FPE_T_FOUR`     | Format-Preserving, Luhn Valid (T4)          | | `PFPT`           | Prefixed, Luhn Valid, 19-Digit Fixed Length |  ### SSN Formats  | Value            | Description            | |------------------|------------------------| | `FPE_SSN_T_FOUR` | Format-Preserving (A4) |  # Authentication  This API uses `Basic` authentication.  Credentials to access the API can be generated on the [dashboard](https://dashboard.verygoodsecurity.com) by going to the Settings section of the vault of your choosing.  [Docs » Guides » Access credentials](https://www.verygoodsecurity.com/docs/settings/access-credentials)  # Rate Limiting  The API allows up to 3,000 requests per minute. Requests are associated with the vault, regardless of the access credentials used to authenticate the request.  Your current rate limit is included as HTTP headers in every API response:  | Header Name             | Description                                              | |-------------------------|----------------------------------------------------------| | `x-ratelimit-remaining` | The number of requests remaining in the 1-minute window. |  If you exceed the rate limit, the API will reject the request with HTTP [429 Too Many Requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429).  # Errors  The API uses standard HTTP status codes to indicate whether the request succeeded or not.  In case of failure, the response body will be JSON in a predefined format. For example, trying to create too many aliases at once results in the following response:  ```json {     \"errors\": [         {             \"status\": 400,             \"title\": \"Bad request\",             \"detail\": \"Too many values (limit: 20)\",             \"href\": \"https://api.sandbox.verygoodvault.com/aliases\"         }     ] } ``` 

The version of the OpenAPI document: 1.0.0
Contact: support@verygoodsecurity.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for VgsapiClient::AliasesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AliasesApi' do
  before(:all) do
    # run before all tests
    VgsapiClient.configure do |config|
        config.username = "US8X3DSEC1MyCACn6RpJL8LT"
        config.password = "02ceadd3-273a-4e98-9005-5daa28a0f6d2"
    end
    @api_instance = VgsapiClient::AliasesApi.new
    @create_aliases_request = VgsapiClient::CreateAliasesRequest.new
    @create_aliases_request_new = VgsapiClient::CreateAliasesRequestNew.new
    @create_aliases_request_new.format = VgsapiClient::AliasFormat.build_from_hash("UUID")
    @create_aliases_request_new.classifiers = ["bank-account"]
    @create_aliases_request_new.value = "122105155"
    @create_aliases_request_new2 = VgsapiClient::CreateAliasesRequestNew.new
    @create_aliases_request_new2.format = VgsapiClient::AliasFormat.build_from_hash("UUID")
    @create_aliases_request_new2.classifiers = ["bank-account"]
    @create_aliases_request_new2.value = "122105156"
    @create_aliases_request.data = [@create_aliases_request_new, @create_aliases_request_new2]
    @aliases = Array.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AliasesApi' do
    it 'should create an instance of AliasesApi' do
      expect(@api_instance).to be_instance_of(VgsapiClient::AliasesApi)
    end
  end

  # unit tests for create_aliases
  # Create aliases
  # Stores multiple values at once &amp; returns their aliases.  Alternatively, this endpoint may be used to associate additional (i.e. secondary) aliases with the same underlying data as the reference alias specified in the request body.  **NOTE:** You cannot reference the same alias more than once in a single request. 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateAliasesRequest] :create_aliases_request 
  # @return [InlineResponse201]
  describe 'create_aliases test' do
    it 'should return aliases' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      opts = {}
      opts[:create_aliases_request] = @create_aliases_request.to_hash
      api_response = @api_instance.create_aliases(opts)
      api_response.data.each do |el|
        el.aliases.each do |cur_alias|
          expect(cur_alias._alias).to match('tok_sandbox_.+')
          @aliases.push(cur_alias._alias)
        end
      end
    end
  end

  # unit tests for delete_alias
  # Delete alias
  # Removes a single alias. 
  # @param _alias Alias to operate on.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_alias test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reveal_alias
  # Reveal single alias
  # Retrieves a stored value along with its aliases.  **NOTE:** This endpoint may expose sensitive data. Therefore, it is disabled by default. To enable it, please contact your VGS account manager or drop us a line at [support@verygoodsecurity.com](mailto:support@verygoodsecurity.com). 
  # @param _alias Alias to operate on.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'reveal_alias test' do
    it 'should return the original value' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      api_response = @api_instance.reveal_alias(@aliases.first, {})
      expect(api_response.data[0].value).to eq "122105155"
    end
  end

  # unit tests for reveal_multiple_aliases
  # Reveal multiple aliases
  # Given a list of aliases, retrieves all associated values stored in the vault.  **NOTE:** This endpoint may expose sensitive data. Therefore, it is disabled by default. To enable it, please contact your VGS account manager or drop us a line at [support@verygoodsecurity.com](mailto:support@verygoodsecurity.com). 
  # @param q Comma-separated list of aliases to reveal.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse200]
  # need to fix line258 as query_params[:'q'] = q.join(',')
  describe 'reveal_multiple_aliases test' do
    it 'should return original values' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      api_response = @api_instance.reveal_multiple_aliases(@aliases.join(','))
      expect(api_response.data[@aliases[0]].value).to eq "122105155"
      expect(api_response.data[@aliases[1]].value).to eq "122105156"
    end
  end

  # unit tests for update_alias
  # Update data classifiers
  # Apply new classifiers to the value that the specified alias is associated with. 
  # @param _alias Alias to operate on.
  # @param [Hash] opts the optional parameters
  # @option opts [UpdateAliasRequest] :update_alias_request 
  # @return _status_code
  # need to fix update_alias to return status code
  describe 'update_alias test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      update_alias_request = VgsapiClient::UpdateAliasRequest.new
      update_alias_request_data = VgsapiClient::UpdateAliasRequestData.new
      update_alias_request_data.classifiers = ["bank-account", "test-tag"]
      update_alias_request.data = update_alias_request_data

      opts = {}
      opts[:update_alias_request] = update_alias_request.to_hash
      api_response = @api_instance.update_alias(@aliases.first, opts)
      # puts api_response
      expect(api_response).to be nil
    end
  end

end
